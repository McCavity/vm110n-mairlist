// vm110_comms.mls
//
//        This script is intended to drive a Velleman K8055(N)/VM110(N)
//        USB Controller card from the mAirlist Software. This instance
//        assumes that the digital outputs 0..4 of the card are serving
//        a five element signal tower; ports 5..7 are currently not in
//        use.
//
//        written by Henning 'McCavity' Halfpap
//
//        Copyright 2021 Henning Halfpap
//
//        Licensed under the Apache License, Version 2.0 (the
//        "License"); you may not use this file except in compliance
//        with the License. You may obtain a copy of the License at
//
//            http://www.apache.org/licenses/LICENSE-2.0
//
//        Unless required by applicable law or agreed to in writing,
//        software distributed under the License is distributed on an
//        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//        either express or implied. See the License for the specific
//        language governing permissions and limitations under the
//        License.
//
//        Installation instructions:
//
//        1. Place this script in your mAirlist script folder (e.g.
//           C:\Program Files\mAirlist\scripts) (or clone git repo)
//        2. Edit this script and set DEBUG to 'true'
//        ...
// 
//        Many thanks to all who contributed to this script, namely
//          - Tondose, who provided some very useful information
//            and code examples
//          - Torben, for his relentless efforts on making mAirlist
//            the best Radio Software money can buy and his gene-
//            rous support of the community
//
// Version 0.0.1 - 14.03.2021 - Initial skeleton

const
/// General script constants /////////////////////////////////////////
  ME         = 'vm110_comms'; // The name of this script (to be used
                              // in log entries, e.g.
  sOFF       = 0;             // state constants for the channels
  sON        = 1;
  sSLOW      = 2;             // slow and fast can be added to
  sFAST      = 4;             // facilitate alternate blinking

/// Configurable settings - adapt to your environment ////////////////
// see if this can be evacuated to an .ini file - see scratchpad.txt
  DEBUG = true; // set this to 'false' in production environment
                // will print *every* message to system log!
  SLOW  = 500;  // 500 ms = 1/2 s period = 1 Hz
  FAST  = 250;  // 250 ms = 1/4 s period = 2 Hz
  TKTT1 = 90;   // Talk timer 1 (in seconds)
  TKTT2 = 120;  // Talk timer 1 (in seconds)
  ARIT1 = 60;   // ARI timer 1 (in seconds)
  ARIT2 = 90;   // ARI timer 2 (in seconds)
  LVLT1 = 5;    // Level timer 1 (in seconds)
  LVLT2 = 10;   // Level timer 2 (in seconds)
  
/// BEGIN Velleman K8055(N) / VM110(N) settings //////////////////////
/// DONÂ´T touch unless you know what you are doing!!! ////////////////
  pMIN  = 1;    // Lowest port
  pMAX  = 8;    // Highest port
  GREEN = pMIN;
  RED   = pMIN + 1;
  AMBER = pMIN + 2;
  WHITE = pMIN + 3;
  BLUE  = pMIN + 4;

/// END Velleman K8055(N) / VM110(N) settings ////////////////////////

var
/// Internal script variables (global) ///////////////////////////////
  isOnAir, isVoiceTrack: boolean;   // keep states local in the script
                                    // set by the appropriate On...
				    // procedures
  channelStates: array[1..8] of integer; // keep local channel states

function Abs(r: integer): integer;
// Implementation of the mathematical Abs() function
//
//    Args:
//        r (integer): a signed integer
//
//    Returns:
//        integer: an unsigned integer
//
  begin
    if r < 0 then
      Result := r * -1
    else
      Result := r;
  end;
  
procedure Velleman(iColor, iState: integer);
// Sets the state for the outputs of a Velleman K8055(N)/VM110(N) card
//
//    Args:
//        iColor (integer): the output port to be switched (1..8)
//                          ports 1..5 are colour-coded (see const)
//        iState (integer): the desired state (0 = off, 1 = on)
//
  begin
    if iState = 0 then
      K8055Remote(0).ClearDigitalChannel(iColor)
    else if iState = 1 then
      K8055Remote(0).SetDigitalChannel(iColor);
  end;

procedure blink(iPort, iState: integer);
  begin
  end;

procedure pulse(iPort, iDurationOn, iDurationOff: integer);
  begin
    Velleman(iPort, 1);
    Sleep(iDurationOn);
    Velleman(iPort, 0);
    Sleep(iDurationOff);    
  end;

function getState(iPort: integer): integer;
  begin
    if (iPort < 1) or (iPort > 8) then
      begin
        Result := -1;
      end
    else
      Result := channelStates[iPort];
  end;

procedure setState(iPort, iState: integer);
  begin
    if (iPort < 1) or (iPort > 8) then
      begin
      end
    else
      begin
        if (iState >= 0) or (iState <= 6) then
          channelStates[iPort] := iState;
        Case iState Of
          0..1: Velleman(iPort, iState);
          2..6: blink(iPort, iState);
        else
        end;
      end;
 end;

procedure initController;
  var
    i: integer;
  begin
    isOnAir      := false;
    isVoiceTrack := false;
  end;

procedure testController;
  var
    i, k: integer;
  begin
    for k := 0 to 2 do
      begin
        for i := 1 to 8 do
          begin
	    pulse(i, 200, 50);
          end;
        for i := 6 downto 2 do
          begin
	    pulse(i, 200, 50);
          end;
      end;  
  end;

procedure resetController;
  var
    i: integer;
  begin
    begin
      for i := 1 to 8 do
        Velleman(i, sOFF);
	setState(i, sOFF);
    end;
  end;

procedure OnLoad;
  var
    i: integer;
  begin
    initController; 
    testController
    resetController
  end;

procedure OnUnload;
  begin
    resetController;
  end;

procedure OnOnAir;
  begin
    isOnAir := true;
    setState(GREEN, sON);
  end;

procedure OnOffAir;
  begin
    isOnAir := false;
    setState(GREEN, sOFF);
  end;

// Called when (playlist) player reaches EOF warning point (default:
// 10s before the end of the track)
procedure OnPlayerEOFWarning(PlaylistIndex: integer;
                             PlayerIndex: integer);
begin
  // set "onAir" to slow blinking
  end;

// Called when RuntimeData (global variables shared among scripts) change.
// Set data with SetRuntimData(key, value);
procedure OnRuntimeDataChange(Key, Value: string);
  begin
  end;

// Main()
begin
  initController;
  if DEBUG then
    begin
      testController;
    end;
  if NOT DEBUG then
    begin
      resetController;
    end;
end.
